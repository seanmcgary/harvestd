## Components

- harvest daemon (harvestd)
- harvest client
- harvest front-end/visualizer


## Run standalone

```
npm install --global harvestd

harvestd
```

## Use as a library

```
npm install harvestd
```

```javascript
var Harvestd = require('harvestd');

var server = Harvestd.create({
	logger: logWranglerInst, 	// optional paramter to provide your own logwrangler object
	store: customStore 			// optional paramter to provide your own store interface
});

server.start();

```

## Creating a custom store

By default, Harvestd comes with and Elasticsearch adapter and will use it as its default data store. 
Depending on your usecase however, you may want to use some other datastore, multiple datastores, or 
event format your data in an entirely different way. To do that, all you need to do is implement the 
Harvestd.Store prototype for ```track``` and ```identify``` and pass an instance of it when creating 
your Harvestd server instance.


```javascript
var Q = require('q');
var Harvestd = require('harvestd');

function MyStore(){
	// do whatever initialization you want
}

MyStore.prototype = Object.create(Harvestd.Store.prototype);

/**
	@string token		Account identification token (if not running multi-tenant, 
						this can be any string value with a length >= 1). Otherwise
						You should use this value to identify each user/account.
		
	@string event 		The event name
	@object data		Object literal representing the data that needs to be inserted
*/
MyStore.prototype.track = function(token, event, data){
	// Impelment me

	// must return a thennable promise
	return Q.resolve();
};


/**
	@string token		Account identification token (if not running multi-tenant, 
						this can be any string value with a length >= 1). Otherwise
						You should use this value to identify each user/account.

	@string uuid 		The uuid to use to find events to set the userId on
	@string userId		The userId to set
*/
MyStore.prototype.identify = function(token, uuid, userId){
	// Impelment me

	// must return a thennable promise
	return Q.resolve();
};

var server = Harvestd.create({
	store: new MyStore() 			// optional paramter to provide your own store interface
});

server.start();
```


## Available helper functions in the Store prototype:

### ```Store.prototype.formatAttribute(str)```

Takes an attribute and formats it. If you pass and object or an array, it will traverse it, formatting all nested fields.

The main purpose is to ensure that values are the correct types. For example:

```javascript
	var data = {
		someBool: "true"
	};

	data = Store.prototype.formatAttribute(data);

	/*
		The string "true" is converted into an actual boolean value. 
		{
			someBool: true
		}
	*/
```

## API Routes

### track

Track an event with any arbitrary amount of data. See [services/harvestd/modules/api/elasticsearchStore/mappings](services/harvestd/modules/api/elasticsearchStore/mappings.js) for an example of available fields (if using the ESStore handler).

```
POST /track
Content-Type: application/json

{
	"token": "your account token",
	"event": "an event name",
	"data": {
		"$uuid": "client uuid"
	}
}
```


### identify

Identify is used to associate tracked events with a particular UUID with some kind of userId from
your own backend. This can be any string value you want - an integer user id, a user's email, etc, as
long as its unique within your system. By default when you track an event, the $uuid will be used as the $userId
if the $userId is not provided.

Calling ```identify()``` will also store the provided userId for the session so subsequent ```track()``` calls 
are identified.

```identify()``` should be called whenever a user can be identified; this could be after signup, login, or at any other point that a user's identity is determined in your app.

```
POST /track
Content-Type: application/json

{
	"token": "your account token",
	"uuid": "client uuid"
	"userId": "ID of identified user"
}
```

